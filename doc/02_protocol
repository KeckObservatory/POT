POT clients and servers communicate using ZeroMQ sockets. This document
describes the socket types and the formatting of the messages for the
various requests.

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

The first socket type implements a request/response socket pattern. This
represents the bulk of the interactive traffic between a POT client and
server. Because requests can be asynchronous, this does not use the
REQ/REP implementation in ZeroMQ, which enforces a strict one request,
one response pattern; instead, we use DEALER/ROUTER, which allows any
amount of messages at any time.

The handshaking between the client and server is of this form:

	Client says:	b'ACTION argument1 argument2 argument3'

	Server says:	bJSON: {'message': 'ACK',
				'id': eight hexadecimal digits,
				'time', timestamp for this acknowledgement,
				'data': first 32 characters of request}

All messages on the ZeroMQ sockets are formatted as raw bytes. The initial
Client request is simple enough that no formatting is necessary; the server
response is somewhat more involved, and JSON is used as a convenient and
portable way to encapsulate the response. The 'request' field is a truncated
readback of the request from the client; this allows the client to confirm
the server is responding to the correct request.

The ACK response comes back immediately upon receipt of the request. The
absence of a quick response is an indication to the client that the server
is not available, and it should immediately raise an error. After the client
has received the initial ACK it should then wait for the full response for
its request:

	Server says:	bJSON: {'message': 'REP',
				'id': eight hexadecimal digits,
				'time', timestamp for this response,
				'name': unique name for this telemetry or data,
				'data': data according to request}

At this point the request is complete and no further messages will be issued,
unless and until the next request arrives.

The full exchange on the client side is represented by this sequence of
operations:

	zmq_context = zmq.Context()
        self.socket = zmq_context.socket(zmq.DEALER)
        self.socket.setsockopt(zmq.LINGER, 0)
        self.socket.identity = identity.encode()
        self.socket.connect(server)

	self.socket.send(request)
	result = self.socket.poll(100) # milliseconds
	if result == 0:
	    raise zmq.ZMQError('no response received in 100 ms')

	ack = self.socket.recv()
	response = self.socket.recv()

Some responses may include a bulk data component. These will be distinguished
by having a 'REP+B' message type. If the 'name' was, for example:

	kpfguide.LASTIMAGE

The contents of the REP+B response may look like:

			{'message': 'REP+B',
			 'id': deadbeef,
			 'time': 1715738507.234
			 'name': 'kpfguide.LASTIMAGE',
			 'data': JSON description of data}

The '+B' on the message field is an indicator that there is a binary data blob
that will be sent in a separate message. The separate message would have a
"topic" identifier of:

	kpfguide.LASTIMAGE;bulk

The formatting of the on-the-wire message would be:

	b'kpfguide.LASTIMAGE;bulk deadbeef 6712437631249763124962431...'

...where the first whitespace-separated field after the "topic" is the same
unique identifier used in the initial response, and all remaining data after
the space is a pure byte sequence. Both responses must arrive in order for
either component to have any meaning; the 'data' from the first response
will include enough information to reconstruct the binary blob, which at the
present time is only envisioned as image data, or more generally, something
that can be appropriately represented as a NumPy array.

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

The second socket type implements a publish/subscribe socket pattern. The
desired functionality is a neat match for the PUB/SUB socket pattern offered
by ZeroMQ:

	* SUB clients subscribe to one or more "topics" from
	  a given PUB socket, or can subscribe to all topics
	  by subscribing to the empty string. This aligns well
	  with existing usage patterns, where KTL keyword
	  names and EPICS channel names are treated as unique
	  identifiers.

	* The filtering of "topics" occurs on the server side,
	  so if a PUB is publishing a mixture of high-frequency
	  or large broadcasts, and a client is not subscribed
	  to those "topics", the broadcasts are never sent to
	  the client.

The messages received by the client include the full topic as the leading
element in the message-as-bytes, followed by a space, followed by the remainder
of the message contents. The structure of a simple broadcast mimics the form
of the response described above:

	Server says:	b'unique_topic_string JSON...'

	JSON expanded:	{'message': 'PUB',
			 'id': eight hexadecimal digits,
			 'time', timestamp for this broadcast,
			 'name': unique name for this telemetry or data,
			 'data': data according to request}

There are two special types of broadcast messages. These are distinguished
by a modifier on the "topic" string. The first type is the bulk/binary data
broadcast type, as described above for a REP+B response; there is a similar
PUB+B broadcast with otherwise exactly the same structure.

The second type of special broadcast message is a bundle of related broadcasts.
If a server so chooses, it can collect related telemetry in a single broadcast;
this offers clients the option of treating the entire bundle as an atomic
entity. Each bundle is a sequence of simple JSON messages as described above.

If, for example, there was a bundle of telemetry messages relating to a filter
wheel, the individual items might have names like:

	deimot.FILTERNAM
	deimot.FILTERORD
	deimot.FILTERRAW

The POT server could elect to broadcast a single bundle containing all of those
values. The bundle message would have a "topic" identifier of:

	deimot.FILTER;bundle

The formatting of the on-the-wire message would be:

	b'deimot.FILTER;bundle JSON...'

...where the JSON would be a sequence of individual PUB elements as described
above:

	[{'message': 'PUB', 'id': eight hexadecimal digits, ...},
	 {'message': 'PUB', 'id': eight hexadecimal digits, ...},
	 {'message': 'PUB', 'id': eight hexadecimal digits, ...}]

The 'id' field would be identical for all messages in the bundle, but all
remaining fields would vary according to the message contents.

	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

This section is a more complete description of the various fields used in
the JSON messaging described above.

	'message': a one-word assertion of the type of content represented
		by this JSON. It is one of a few values:

		'ACK': immediate acknowledgement of a request. If this
			response is not received with a very small time
			window after the initial request, the client can
			and should assume the server for that request is
			offline.

		'REP': a response to a direct request. This will contain
			the full data responding to a request to read a
			value, or the completion status of a write request.

		'REP+B': same as 'REP' except that a second message will
			arrive with the contents of the bulk data.

		'PUB': an asynchronous broadcast of an event. There aren't
			any other types of message that will arrive on a
			SUB socket, the inclusion of this field is strictly
			for symmetry's sake.

		'PUB+B': same as 'PUB' except that a second message will
			arrive with the contents of the bulk data.

	'id': an eight character hexadecimal value reasonably unique to
		this specific transaction. The 'unique' constraint doesn't
		need to extend beyond a few minutes, at most, for any
		transaction; the id allows the client to tie together
		ACK and REP messages, to combine the JSON with the data
		buffer for a 'bulk' broadcast, and to further associate
		individual PUB messages contained in a 'bundle' broadcast.

	'time': a UNIX epoch timestamp associated with the generation of
		the event. This is not intended to represent some time
		prior to the actual broadcast or response, it is intended
		to represent the time at which that message was created,
		such that 'now' - 'time' should represent the transmission
		and POT handling delay between the server and the client.
		This timestamp should not be expected to represent the
		last known change of the value in question, though in some
		(if not most) cases it will be a reasonable approximation.

	'name': the unique name for this piece of telemetry or data. In
		KTL parlance, this would be the service.KEYWORD name; in
		EPICS parlance, it would be the full IOC+channel name, as
		one might use with caput or caget on the command line.

	'data': the real payload of the message. For a read operation, this
		will be the telemetry requested, whether it be a string,
		integer, floating point number, or short sequence. For a
		response with no data this field will either not be present
		or it will be the JSON null value.

	'error': a JSON dictionary with information about any error that
		occurred while processing the request. If the value is
		not present or is the JSON null value, no error occurred.
		If it is present, it will have these values:

		'type': analagous to the Python exception type (ValueError,
			TypeError, etc.).

		'text': descriptive text of the error.

		The intent of this error field is not to provide enough
		information for debugging of code, it is intended to
		provide enough information to the client for it to perform
		meaningful error handling in its own software.
